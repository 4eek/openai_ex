# OpenaiEx Usage Notebook

```elixir
my_app_root = Path.join(__DIR__, "..")

Mix.install(
  [
    {:openai_ex, path: my_app_root}
  ],
  lockfile: Path.join(my_app_root, "mix.lock")
)
```

## Usage

This library is a thin wrapper around the OpenAI API client. It mirrors the API structure of the existing official clients in Python and JS.

Instead of repeating the documentation from that API, I have provided links to the actual API reference.

<!-- livebook:{"break_markdown":true} -->

### [Authentication](https://platform.openai.com/docs/api-reference/authentication)

Following API best practices, the tokens are stored in environment variables.

Default organization.

```elixir
# You can use LB_OPENAI_API_KEY in Livebook
apikey = System.fetch_env!("OPENAI_API_KEY")
openai = OpenaiEx.new(apikey)
```

Specified organization (uncomment to run)

```elixir
# organization = System.fetch_env!("OPENAI_ORGANIZATION")
# openai = OpenAIEx.new(apikey, organization)
```

### [Model](https://platform.openai.com/docs/api-reference/models)

To [list](https://platform.openai.com/docs/api-reference/models/list) all models

```elixir
openai |> OpenaiEx.Model.list()
```

To [retrieve](https://platform.openai.com/docs/api-reference/models/retrieve) a specific model

```elixir
openai |> OpenaiEx.Model.retrieve("text-davinci-003")
```

### [Completion](https://platform.openai.com/docs/api-reference/completions)

To [create](https://platform.openai.com/docs/api-reference/completions/create) a completion, first define the structure.

```elixir
completion =
  OpenaiEx.Completion.new(
    model: "text-davinci-003",
    prompt: "Say this is a test",
    max_tokens: 100,
    temperature: 0
  )
```

then call the endpoint

```elixir
openai |> OpenaiEx.Completion.create(completion)
```

### [Chat Completion](https://platform.openai.com/docs/api-reference/chat/completions)

We begin by defining the messages needed for the chat

```elixir
alias OpenaiEx.ChatMessage

messages = [ChatMessage.user("Hello")]
```

Next we define the request structure

```elixir
chat_completion = OpenaiEx.ChatCompletion.new(model: "gpt-3.5-turbo", messages: messages)
```

Finally we call the [endpoint](https://platform.openai.com/docs/api-reference/chat/completions/create)

```elixir
openai |> OpenaiEx.ChatCompletion.create(chat_completion)
```
