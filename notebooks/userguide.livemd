# OpenaiEx User Guide

```elixir
Mix.install([
  #  {:openai_ex, git: "https://github.com/restlessronin/openai_ex.git", tag: "v0.1.3"},
  # {:openai_ex, "~> 0.1.3"},
  {:openai_ex, path: Path.join(__DIR__, "..")},
  {:kino, "~> 0.9.2"}
])
```

## Introduction

`OpenaiEx` is an Elixir library that provides a community-maintained client for the OpenAI API.

The library closely follows the structure of the [official OpenAI API client libraries](https://platform.openai.com/docs/api-reference) for [Python](https://github.com/openai/openai-python) and [JavaScript](https://github.com/openai/openai-node), making it easy to understand and reuse existing documentation.

To learn how to use OpenaiEx, you can refer to the relevant parts of the official OpenAI API reference documentation, which we link to throughout this document.

This file is an executable Livebook, which means you can interactively run and modify the code samples provided. We encourage you to [open it in Livebook](https://livebook.dev/run?url=https://github.com/restlessronin/openai_ex/blob/v0.1.3/notebooks/userguide.livemd) and try out the code for yourself!

## Installation

You can install OpenaiEx using Mix:

### In Livebook

Add the following code to the first connection cell:

<!-- livebook:{"force_markdown":true} -->

```elixir
Mix.install(
  [
    {:openai_ex, "~> 0.1.3"}
  ],
)
```

### In a Mix Project

Add the following to your mix.exs file:

<!-- livebook:{"force_markdown":true} -->

```elixir
def deps do
  [
    {:openai_ex, "~> 0.1.3"}
  ]
end
```

## Authentication

To authenticate with the OpenAI API, you will need an API key. We recommend storing your API key in an environment variable. Since we are using Livebook, we can store this and other environment variables as [Livebook Hub Secrets](https://news.livebook.dev/hubs-and-secret-management---launch-week-1---day-3-3tMaJ2).

```elixir
apikey = System.fetch_env!("LB_OPENAI_API_KEY")
openai = OpenaiEx.new(apikey)
```

You can also specify an organization if you are a member of more than one:

```elixir
# organization = System.fetch_env!("LB_OPENAI_ORGANIZATION")
# openai = OpenaiEx.new(apikey, organization)
```

For more information on authentication, see the [OpenAI API Authentication reference](https://platform.openai.com/docs/api-reference/authentication).

## Model

### List Models

To list all available models, use the [`Model.list()`](https://platform.openai.com/docs/api-reference/models/list) function:

```elixir
alias OpenaiEx.Model

openai |> Model.list()
```

### Retrieve Models

To retrieve information about a specific model, use the [`Model.retrieve()`](https://platform.openai.com/docs/api-reference/models/retrieve) function:

```elixir
openai |> Model.retrieve("text-davinci-003")
```

For more information on using models, see the [OpenAI API Models reference](https://platform.openai.com/docs/api-reference/models).

## Completion

To generate a completion, you first need to define a completion request structure using the `Completion.new()` function. This function takes several parameters, such as the model ID, the prompt, the maximum number of tokens, etc.

```elixir
alias OpenaiEx.Completion

completion_req =
  Completion.new(
    model: "text-davinci-003",
    prompt: "Say this is a test",
    max_tokens: 100,
    temperature: 0
  )
```

Once you have defined the completion request structure, you can generate a completion using the [`Completion.create()`](https://platform.openai.com/docs/api-reference/completions/create) function:

```elixir
comp_response = openai |> Completion.create(completion_req)
```

For more information on generating completions, see the [OpenAI API Completions reference](https://platform.openai.com/docs/api-reference/completions).

## Chat Completion

To generate a chat completion, you need to define a chat completion request structure using the `ChatCompletion.new()` function. This function takes several parameters, such as the model ID and a list of chat messages. We have a module `ChatMessage` which helps create messages in the [chat format](https://platform.openai.com/docs/guides/chat/introduction).

```elixir
alias OpenaiEx.ChatCompletion
alias OpenaiEx.ChatMessage

chat_req = ChatCompletion.new(model: "gpt-3.5-turbo", messages: [ChatMessage.user("Hello")])
```

You can generate a chat completion using the [`ChatCompletion.create()`](https://platform.openai.com/docs/api-reference/chat/completions/create) function:

```elixir
chat_response = openai |> ChatCompletion.create(chat_req)
```

For more information on generating chat completions, see the [OpenAI API Chat Completions reference](https://platform.openai.com/docs/api-reference/chat/completions).

## Edit

First you need to define an edit request structure using the `Edit.new()` function. This function takes several parameters, such as the model ID, an input and an instruction.

```elixir
alias OpenaiEx.Edit

edit_req =
  Edit.new(
    model: "text-davinci-edit-001",
    input: "What day of the wek is it?",
    instruction: "Fix the spelling mistakes"
  )
```

To generate the edit, call the [`Edit.create()`](https://platform.openai.com/docs/api-reference/edits) function.

```elixir
edit_response = openai |> Edit.create(edit_req)
```

For more information on generating edits, see the [OpenAI API Edit reference](https://platform.openai.com/docs/api-reference/edits).

## Image

### Generate Image

We define the image creation request structure using the `Image.new` function

```elixir
alias OpenaiEx.Image

img_req = Image.new(prompt: "A cute baby sea otter", size: "256x256", n: 2)
```

Then call the [`Image.create()`](https://platform.openai.com/docs/api-reference/images/create) function to generate the images.

```elixir
img_response = openai |> Image.create(img_req)
```

For more information on generating images, see the [OpenAI API Image reference](https://platform.openai.com/docs/api-reference/images).

#### Fetch the generated images

With the information in the image response, we can fetch the images from their URLs

```elixir
fetch_blob = fn url -> Tesla.client([]) |> Tesla.get!(url) |> Map.get(:body) end

fetched_images = img_response["data"] |> Enum.map(fn i -> i["url"] |> fetch_blob.() end)
```

#### View the generated images

Finally, we can render the images using Kino

```elixir
fetched_images
|> Enum.map(fn r -> r |> Kino.Image.new("image/png") |> Kino.render() end)
```

```elixir
img_to_expmt = fetched_images |> List.first()
```

### Edit Image

We define an image edit request structure using the `Image.Edit.new()` function. This function requires an image and a mask. For the image, we will use the one that we received. Let's load the mask from a URL.

```elixir
# star_mask = File.read!(Path.join(__DIR__, "../assets/images/starmask.png"))
star_mask =
  fetch_blob.(
    "https://raw.githubusercontent.com/restlessronin/openai_ex/main/assets/images/starmask.png"
  )
```

Set up the image edit request with image, mask and prompt.

```elixir
img_edit_req =
  Image.Edit.new(
    image: img_to_expmt,
    mask: star_mask,
    size: "256x256",
    prompt: "Image shows a smiling Otter"
  )
```

We then call the [`Image.create_edit()`]() function

```elixir
img_edit_response = openai |> Image.create_edit(img_edit_req)
```

and view the result

```elixir
img_edit_response["data"]
|> Enum.map(fn i -> i["url"] |> fetch_blob.() |> Kino.Image.new("image/png") |> Kino.render() end)
```

### Image Variations

We define an image variation request structure using the `Image.Variation.new()` function. This function requires an image.

```elixir
img_var_req = Image.Variation.new(image: img_to_expmt, size: "256x256")
```

Then call the [`Image.create_variation()`](https://platform.openai.com/docs/api-reference/images/create-variation) function to generate the images.

<!-- livebook:{"break_markdown":true} -->

###

```elixir
img_var_response = openai |> Image.create_variation(img_var_req)
```

```elixir
img_var_response["data"]
|> Enum.map(fn i -> i["url"] |> fetch_blob.() |> Kino.Image.new("image/png") |> Kino.render() end)
```

For more information on images variations, see the [OpenAI API Image Variations reference](https://platform.openai.com/docs/api-reference/images/create-variation).

## Embedding

Define the embedding request structure using `Embedding.new`.

```elixir
alias OpenaiEx.Embedding

emb_req =
  Embedding.new(
    model: "text-embedding-ada-002",
    input: "The food was delicious and the waiter..."
  )
```

Then call the [`Embedding.create()`]() function.

```elixir
emb_response = openai |> Embedding.create(emb_req)
```

For more information on generating embeddings, see the [OpenAI API Embedding reference](https://platform.openai.com/docs/api-reference/embeddings/create)

## Audio

### Transcription

To define an Audio request structure, we need to create a file parameter using `Audio.File.new()`.

```elixir
alias OpenaiEx.Audio

# audio_file = OpenaiEx.new_file(path: Path.join(__DIR__, "../assets/transcribe.mp3"))

audio_url = "https://raw.githubusercontent.com/restlessronin/openai_ex/main/assets/transcribe.mp3"

audio_file = OpenaiEx.new_file(name: audio_url, content: fetch_blob.(audio_url))
```

The file parameter is used to create the Audio request structure

```elixir
audio_req = Audio.new(file: audio_file, model: "whisper-1")
```

We then call the [`Audio.transcribe()`](https://platform.openai.com/docs/api-reference/audio/create) function to create a transcription.

```elixir
audio_response = openai |> Audio.transcribe(audio_req)
```

### Translation

The translation call uses practically the same request structure, but calls the `Audio.translate()` endpoint

For more information on the audio endpoints see the [Openai API Audio Reference](https://platform.openai.com/docs/api-reference/audio)

## Files

### List files

To request all files that belong to the user organization, call the [`File.list()`](https://platform.openai.com/docs/api-reference/files/list) function

```elixir
alias OpenaiEx.File

files_list_resp = File.list()
```

### Upload files

To upload a file, we need to create a file parameter, and then the upload request

```elixir
# fine_tune_file = OpenaiEx.new_file(path: Path.join(__DIR__, "../assets/fine-tune.jsonl"))
ftf_url = "https://raw.githubusercontent.com/restlessronin/openai_ex/main/assets/fine-tune.jsonl"

fine_tune_file = OpenaiEx.new_file(name: ftf_url, content: fetch_blob.(ftf_url))
upload_req = File.new_upload(file: fine_tune_file, purpose: "fine-tune")
```

### Retrieve files

```elixir

```

### Retrieve file content

```elixir

```

### Delete file

<!-- livebook:{"offset":10614,"stamp":{"token":"QTEyOEdDTQ.Q9mNBsP9Af6Jub0MtalW3wrsAppX_FTSq2Rh4-lEqjJiZsZlBwlfLw0KQGY.WFts3bqMxRt3QX1Z.Ju2r5L1BK3HB5A0HrvEY6MCAs_UWsT4wYQXtKnCjji1oI9_BtLf1Gr_cQYOiR9LLxMc.FPDhhVqlgqfZOjTU6EPYRg","version":1}} -->
