<!-- livebook:{"app_settings":{"access_type":"public","show_source":true,"slug":"completion"}} -->

# Continuation Kino App

```elixir
Mix.install([
  {:openai_ex, "~> 0.2.0"},
  {:kino, "~> 0.9.2"}
])

alias OpenaiEx
alias OpenaiEx.Completion
```

## Simple Kino UI

```elixir
openai = System.fetch_env!("LB_OPENAI_API_KEY") |> OpenaiEx.new()
```

Set default parameters for continuation fields

```elixir
comp_models = [
  "text-davinci-003",
  "text-davinci-002",
  "text-curie-001",
  "text-babbage-001",
  "text-ada-001"
]

model = comp_models |> Enum.at(0)
max_tokens = 100
temperature = 1
```

### Prompt / Response UI

```elixir
frame = Kino.Frame.new()
inputs = [prompt: Kino.Input.textarea("Prompt")]
form = Kino.Control.form(inputs, submit: "Send", reset_on_submit: [:prompt])

Kino.listen(form, fn %{data: %{prompt: prompt}} ->
  Kino.Frame.append(frame, Kino.Markdown.new("**Me** #{prompt}"))

  text =
    openai
    |> Completion.create(%{
      model: model,
      prompt: prompt,
      max_tokens: max_tokens,
      temperature: temperature
    })
    |> Map.get("choices")
    |> Enum.at(0)
    |> Map.get("text")

  Kino.Frame.append(frame, Kino.Markdown.new("**#{model}** #{text}"))
end)

Kino.Layout.grid([frame, form], boxed: true, gap: 16)
```

<!-- livebook:{"offset":1267,"stamp":{"token":"QTEyOEdDTQ.6L6wiYAyyNZN6atBVU4-sRc2-7KpQjiKFaFltJ1Ivbnn5x-MfYxCasAkI78.iVJqZokBZau50Qmm.vDeKt2QK4Rz7NS4fjaReGM2VLKkAtgjjbH5NbUw5LQXN7i5xVYsiCyyBB0_Mus0y2Z4.M74c16yxHUkpiEija0qGow","version":1}} -->
